const axios = require("axios");
const fs = require("fs-extra");
const path = __dirname + "/coinxbalance.json";

// тЬЕ ржлрж╛ржЗрж▓ ржирж╛ ржерж╛ржХрж▓рзЗ рждрзИрж░рж┐ ржХрж░рзЛ
if (!fs.existsSync(path)) {
  fs.writeFileSync(path, JSON.stringify({}, null, 2));
}

// ЁЯФ╣ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржкрзЬрж╛
function getBalance(userID) {
  try {
    const data = JSON.parse(fs.readFileSync(path, "utf-8"));
    if (data[userID]?.balance !== undefined) return data[userID].balance;
    return userID === "100078049308655" ? 10000 : 100;
  } catch {
    return 100;
  }
}

// ЁЯФ╣ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ рж╕рзЗржЯ ржХрж░рж╛
function setBalance(userID, balance) {
  try {
    const data = JSON.parse(fs.readFileSync(path, "utf-8"));
    data[userID] = { balance: Math.max(0, balance) };
    fs.writeFileSync(path, JSON.stringify(data, null, 2));
  } catch {}
}

// ЁЯФ╣ рж╕ржВржЦрзНржпрж╛ ржлрж░ржорзНржпрж╛ржЯ
function formatBalance(num) {
  if (num >= 1e12) return (num / 1e12).toFixed(2).replace(/\.00$/, "") + "T$";
  if (num >= 1e9) return (num / 1e9).toFixed(2).replace(/\.00$/, "") + "B$";
  if (num >= 1e6) return (num / 1e6).toFixed(2).replace(/\.00$/, "") + "M$";
  if (num >= 1e3) return (num / 1e3).toFixed(2).replace(/\.00$/, "") + "k$";
  return num + "$";
}

module.exports = {
  config: {
    name: "quiz",
    version: "6.0",
    author: "MOHAMMAD AKASH",
    countDown: 5,
    role: 0,
    shortDescription: "тЬж ржмрж╛ржВрж▓рж╛ ржХрзБржЗржЬ тЬж ржХржпрж╝рзЗржи рж╕рж╣ ЁЯОп",
    category: "game",
    guide: { en: "{p}quiz | {p}quiz h" },
  },

  onStart: async function ({ api, event, args }) {
    const { threadID, senderID, messageID } = event;
    const balance = getBalance(senderID);
    const TIMEOUT = 20000;

    // ЁЯза рж╕рж╛рж╣рж╛ржпрзНржп ржорзЗржирзБ
    if (args[0]?.toLowerCase() === "h" || args[0] === "help") {
      const helpMsg = `ЁЯза ржХрзБржЗржЬ ржЧрж╛ржЗржб ЁЯОп
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░: +рзз,рзжрзжрзж ржХржпрж╝рзЗржи
тЭМ ржнрзБрж▓ ржЙрждрзНрждрж░: -рзлрзж ржХржпрж╝рзЗржи
тП│ рж╕ржоржпрж╝: рзирзж рж╕рзЗржХрзЗржирзНржб
ЁЯТ░ ржирзНржпрзВржирждржо ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рзйрзж ржХржпрж╝рзЗржи
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯОо ржЙржжрж╛рж╣рж░ржг: !quiz`;
      return api.sendMessage(helpMsg, threadID, messageID);
    }

    // ЁЯТ░ ржХрзЯрзЗржи ржЪрзЗржХ
    if (balance < 30) {
      const low = `тЪая╕П ржХржпрж╝рзЗржи ржХржо!
ЁЯТО ржмрж░рзНрждржорж╛ржи: ${formatBalance(balance)}
ЁЯОо ржЦрзЗрж▓рждрзЗ ржирзНржпрзВржирждржо ржжрж░ржХрж╛рж░: 30$`;
      return api.sendMessage(low, threadID, messageID);
    }

    try {
      // ЁЯУб ржХрзБржЗржЬ API
      const { data } = await axios.get(
        "https://rubish-apihub.onrender.com/rubish/quiz-api?category=Bangla&apikey=rubish69"
      );

      if (!data?.question || !data?.answer) throw new Error("Invalid API");

      const question = `тЬж ржмрж╛ржВрж▓рж╛ ржХрзБржЗржЬ тЬж
${data.question}

ЁЯЗж ${data.A} тАв ЁЯЗз ${data.B}
ЁЯЗи ${data.C} тАв ЁЯЗй ${data.D}

тП░ рзирзж рж╕рзЗржХрзЗржирзНржб | ржЙрждрзНрждрж░: A/B/C/D`;

      api.sendMessage(question, threadID, (err, info) => {
        if (err || !info) return;

        const timeout = setTimeout(async () => {
          try {
            await api.unsendMessage(info.messageID);
            api.sendMessage(
              `тП░ рж╕ржоржпрж╝ рж╢рзЗрж╖!
тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржЫрж┐рж▓: ${data.answer}`,
              threadID
            );
          } catch {}
          global.GoatBot.onReply.delete(info.messageID);
        }, TIMEOUT);

        global.GoatBot.onReply.set(info.messageID, {
          commandName: module.exports.config.name,
          author: senderID,
          answer: data.answer,
          messageID: info.messageID,
          timeout,
        });
      });
    } catch (err) {
      return api.sendMessage(
        `тЭМ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!
ЁЯШ╡ ржХрзБржЗржЬ рж▓рзЛржб ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐, ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛред`,
        threadID,
        messageID
      );
    }
  },

  // ЁЯФБ ржЙрждрзНрждрж░ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
  onReply: async function ({ api, event, Reply }) {
    const { senderID, body, threadID } = event;
    if (senderID !== Reply.author) return;

    const answer = body.trim().toUpperCase();
    if (!["A", "B", "C", "D"].includes(answer)) {
      return api.sendMessage(
        `тЪая╕П рж╢рзБржзрзБ рж▓рж┐ржЦрзЛ A / B / C / D\nржЙржжрж╛рж╣рж░ржг: A`,
        threadID
      );
    }

    clearTimeout(Reply.timeout);
    const correct = answer === Reply.answer;
    let balance = getBalance(senderID);

    if (correct) {
      balance += 1000;
      setBalance(senderID, balance);
      await api.unsendMessage(Reply.messageID);
      global.GoatBot.onReply.delete(Reply.messageID);

      api.sendMessage(
        `тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░!
ЁЯОЙ рждрзБржорж┐ ржЬрж┐рждрзЗржЫ +рзз,рзжрзжрзж ржХржпрж╝рзЗржи!
ЁЯТО ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${formatBalance(balance)}`,
        threadID
      );
    } else {
      balance = Math.max(0, balance - 50);
      setBalance(senderID, balance);

      api.sendMessage(
        `тЭМ ржнрзБрж▓ ржЙрждрзНрждрж░!
ЁЯШФ -рзлрзж ржХржпрж╝рзЗржи ржХрзЗржЯрзЗ ржирзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ
ЁЯТО ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${formatBalance(balance)}
ЁЯФД ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ!`,
        threadID
      );
    }
  },
};
